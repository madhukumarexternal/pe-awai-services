service: pe-awai-services-api

# package:
#   individually: true
#   excludeDevDependencies: false

custom:
  account: ${opt:account, '805321607950'}
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'development'}
  tags:
    application: "PE Awai Services"
    owner: Platform Engineering
    env: ${self:custom.stage}
    costcenter: 'TBD'
    role: 'api'
    service: 'awai-services'
  subDomain: pe-awai-services-api
  customDomain:
    basePath: ""
    certificateName: "*.${self:custom.domains.${self:provider.stage}.name}"
    domainName: ${self:custom.subDomain}.${self:custom.domains.${self:provider.stage}.name}
    stage: ${self:provider.stage}
    createRoute53Record: true
    autoDomain: true
  domains:
    development:
      name: "alliedworld.dev"
    production:
      name: "alliedworld.cloud"
    staging:
      name: "alliedworld-staging.cloud"
  allowedIssuers:
    development:
      issuers: aw.oktapreview.com
    staging:
      issuers: aw.okta.com
    production:
      issuers: aw.okta.com
  aws:
    development:
      account: "805321607950"
      securityGroups:
        - Ref: exchangeRatesSg
      vpcId: "vpc-0b18a53b9d7fa154a"
      subnets:
        [
          "subnet-09e97b237811d4519",
          "subnet-0c39741f6d47c8990",
          "subnet-0d34583ae1be2cc66",
          "subnet-0dd616e01ac5f95cb",
          "subnet-00bcd6c2b7fa6ef25",
          "subnet-03071fb7d889cd309"
        ]
    production:
      account: "608056288583"
      securityGroups:
        - Ref: exchangeRatesSg
      vpcId: "vpc-01188c8aa641a9a28"
      subnets:
        [
          "subnet-000879ee07ce4c408",
          "subnet-0ec8064c11e2f5c0d",
          "subnet-00ce54cfeef0d6ade",
          "subnet-0d8dd85f18caba06a",
          "subnet-0acbbcb8a7391fdb4",
          "subnet-0703dd8f8735e0670"
        ]
    staging:
      account: "645769240473"
      securityGroups:
        - Ref: exchangeRatesSg
      vpcId: "vpc-094783b76d3a5126a"
      subnets:
        [
          "subnet-0b8fb69687d3fc8fc",
          "subnet-0e696ee485134f76d",
          "subnet-089040faf9f299388",
          "subnet-04d193648add1e06c",
          "subnet-061276ecd02b2248f",
          "subnet-0983e22a1082700b7"
        ]

provider:
  name: aws
  logs:
    restApi: true
  runtime: nodejs18.x
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  stackTags: ${self:custom.tags}
  timeout: 300
  memorySize: 512
  tracing:
    apiGateway: true
    lambda: true
  # deploymentBucket:
  #   name: sls-deploy-${self:custom.account}-${self:custom.region}
  #   serverSideEncryption: AES256
  vpc:
    securityGroupIds: ${self:custom.aws.${self:provider.stage}.securityGroups}
    subnetIds: ${self:custom.aws.${self:provider.stage}.subnets}
  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${self:custom.stage}
    LOG_LEVEL: DEBUG

  iam:
    role:
      statements: # permissions granted to this service
        - Effect: Allow
          Action:
            - "*"
          Resource:
            - "*"

functions:
  fetchUesrData:
    handler: src/handler/conversation-handler.getConversationData
 
resources:
  Resources:
    exchangeRatesSg:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: pe-exchange-rates-sg
        GroupDescription: Security Group for PE Exchange Rates
        VpcId: ${self:custom.aws.${self:provider.stage}.vpcId}
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0

    

plugins:
  - serverless-offline
  - serverless-jest-plugin
  - serverless-plugin-tracing
  - serverless-plugin-typescript
  - serverless-plugin-include-dependencies
  - serverless-step-functions
  - serverless-domain-manager
  - serverless-plugin-resource-tagging


